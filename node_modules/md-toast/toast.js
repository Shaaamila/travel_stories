"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var view_container_ref_1 = require('@angular/core/src/linker/view_container_ref');
var toast_component_1 = require('./toast.component');
var MdToast = (function () {
    function MdToast(loader, appRef) {
        this.loader = loader;
        this.hideDelay = 3000;
        this.index = 0;
        this.appRef = appRef;
    }
    /**
     * show toast
     * @param toastObj string or object with message and other properties of toast
     */
    MdToast.prototype.show = function (toastObj) {
        var _this = this;
        var toast;
        if (typeof toastObj === 'string') {
            toast = new Toast(toastObj);
        }
        else if (typeof toastObj === 'object') {
            toast = new Toast(toastObj.message);
            this.hideDelay = toastObj.hideDelay;
        }
        if (toast) {
            if (!this.container) {
                var appElement = new view_container_ref_1.ViewContainerRef_(this.appRef['_rootComponents'][0]._hostElement);
                var bindings = core_1.ReflectiveInjector.resolve([]);
                this.loader.loadNextToLocation(toast_component_1.MdToastComponent, appElement, bindings).then(function (ref) {
                    _this.container = ref;
                    _this.setupToast(toast);
                });
            }
            else {
                this.setupToast(toast);
            }
        }
    };
    /**
     * toast timeout
     * @param toastId
     */
    MdToast.prototype.startTimeout = function (toastId) {
        var _this = this;
        setTimeout(function () {
            _this.clear(toastId);
        }, this.hideDelay);
    };
    /**
     * setup toast
     * @param toast
     */
    MdToast.prototype.setupToast = function (toast) {
        toast.id = ++this.index;
        this.container.instance.add(toast);
        this.startTimeout(toast.id);
    };
    /**
     * clear all toast
     * @param toastId
     */
    MdToast.prototype.clear = function (toastId) {
        if (this.container) {
            var instance = this.container.instance;
            instance.remove(toastId);
            if (!instance.isToast()) {
                this.hide();
            }
        }
    };
    /**
     * hide all or specific toasts
     */
    MdToast.prototype.hide = function () {
        this.container.destroy();
        this.container = null;
    };
    MdToast = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [core_1.DynamicComponentLoader, core_1.ApplicationRef])
    ], MdToast);
    return MdToast;
}());
exports.MdToast = MdToast;
var Toast = (function () {
    function Toast(message) {
        this.message = message;
    }
    return Toast;
}());
exports.Toast = Toast;
exports.ACCORDION_DIRECTIVES = [toast_component_1.MdToastComponent];
var MdToastModule = (function () {
    function MdToastModule() {
    }
    MdToastModule = __decorate([
        core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: exports.ACCORDION_DIRECTIVES,
            declarations: exports.ACCORDION_DIRECTIVES,
            providers: [MdToast]
        }), 
        __metadata('design:paramtypes', [])
    ], MdToastModule);
    return MdToastModule;
}());
exports.MdToastModule = MdToastModule;

//# sourceMappingURL=toast.js.map
