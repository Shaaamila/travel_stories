"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var MdToastComponent = (function () {
    function MdToastComponent() {
        this.toasts = [];
        this.maxShown = 5;
    }
    /**
     * add toast
     * @param toast toast object with all parameters
     */
    MdToastComponent.prototype.add = function (toast) {
        this.toasts.push(toast);
        if (this.toasts.length > this.maxShown) {
            this.toasts.splice(0, (this.toasts.length - this.maxShown));
        }
    };
    /**
     * remove toast
     * @param toastId number of toast id
     */
    MdToastComponent.prototype.remove = function (toastId) {
        this.toasts = this.toasts.filter(function (toast) { return toast.id !== toastId; });
    };
    /**
     * check toast
     */
    MdToastComponent.prototype.isToast = function () { return this.toasts.length > 0; };
    MdToastComponent = __decorate([
        core_1.Component({
            selector: 'md-toast',
            template: "\n    <div class=\"md-toast-wrapper\">\n      <div *ngFor=\"let toast of toasts\" class=\"md-toast\" (click)=\"remove(toast.id)\">\n        <div class=\"md-toast-message\">{{toast.message}}</div>\n      </div>\n    </div>\n  ",
            styles: ["\n    .md-toast-wrapper { position: fixed; top: 0; right: 0; z-index: 1060; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; cursor: default; overflow: hidden; min-width: 304px; padding: 8px; -moz-transition: all .4s cubic-bezier(.25,.8,.25,1); -o-transition: all .4s cubic-bezier(.25,.8,.25,1); -webkit-transition: all .4s cubic-bezier(.25,.8,.25,1); transition: all .4s cubic-bezier(.25,.8,.25,1); -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }\n    .md-toast { position: relative; padding: 14px 24px; margin-bottom: 5px; display: block; background-color: #323232; color: #fafafa; box-shadow: 0 2px 5px 0 rgba(0,0,0,.26); border-radius: 2px; font-size: 14px; overflow: hidden; -ms-word-wrap: break-word; word-wrap: break-word; -moz-transition: all .4s cubic-bezier(.25,.8,.25,1); -o-transition: all .4s cubic-bezier(.25,.8,.25,1); -webkit-transition: all .4s cubic-bezier(.25,.8,.25,1); transition: all .4s cubic-bezier(.25,.8,.25,1); }\n    .md-toast-message { display: block; }\n  "],
            encapsulation: core_1.ViewEncapsulation.None,
        }), 
        __metadata('design:paramtypes', [])
    ], MdToastComponent);
    return MdToastComponent;
}());
exports.MdToastComponent = MdToastComponent;

//# sourceMappingURL=toast.component.js.map
